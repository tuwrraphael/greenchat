{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/first-time-init.html","webpack:///./src/components/home.html","webpack:///./src/components/link-device.html","webpack:///./node_modules/route-it/dist/index.js","webpack:///./node_modules/idb/build/esm/wrap-idb-value.js","webpack:///./node_modules/idb/build/esm/index.js","webpack:///./node_modules/idb/build/esm/async-iterators.js","webpack:///./src/append-only-log/LogMessage.ts","webpack:///./src/utils/uuid.ts","webpack:///./src/database/GreenchatDatabase.ts","webpack:///./src/components/first-time-init.ts","webpack:///./src/components/home.ts","webpack:///./src/models/DeviceLinkStatus.ts","webpack:///./src/routing/GreenchatRouteResolver.ts","webpack:///./src/message-encoding/MessageTypes.ts","webpack:///./src/components/link-device.ts","webpack:///./src/state/Store.ts","webpack:///./src/state/actions/NotesActionCreator.ts","webpack:///./src/state/actions/InitializationActionCreator.ts","webpack:///./src/utils/toBase64UrlSafe.ts","webpack:///./src/append-only-log/LocalAppendOnlyLog.ts","webpack:///./src/append-only-log/digestMessage.ts","webpack:///./src/message-encoding/MessageModifier.ts","webpack:///./src/append-only-log/LocalAppendOnlyLogService.ts","webpack:///./src/message-encoding/MessageEncoder.ts","webpack:///./src/state/actions/RoutingActionCreator.ts","webpack:///./src/state/reducers/NotesReducer.ts","webpack:///./src/ServiceLocator.ts","webpack:///./src/webrtc/config.ts","webpack:///./src/webrtc/PeerConnectionHandler.ts","webpack:///./src/state/actions/SignallingActionCreator.ts","webpack:///./src/webrtc/SignallingClient.ts","webpack:///./src/state/reducers/GlobalReducer.ts","webpack:///./src/state/actions/DeviceLinkActionCreator.ts","webpack:///./src/state/reducers/DeviceLinkReducer.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","e","this","routeResolver","routeRenderer","lastRoute","popStateListener","handlePopState","doRouting","window","location","pathname","document","querySelector","basePrefix","getAttribute","baseHref","href","addEventListener","removeEventListener","getRoute","resolve","render","substr","length","substring","URL","history","pushState","title","currentComponent","body","removeChild","appendChild","instanceOfAny","constructors","some","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","replaceTraps","callback","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","storeNames","tx","sort","transformCachableValue","done","Promise","reject","unlisten","complete","error","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","returnVal","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","asyncIterator","LogMessage","content","hash","last","signature","timestamp","sequence","uuid","crypto","getRandomValues","Uint8Array","toString","logId","log","db","privateKey","publicKey","top","msgData","messages","storeObj","id","before","add","put","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","keyPath","createIndex","item","HTMLElement","super","shadow","attachShadow","div","createElement","innerHTML","customElements","define","serviceLocator","notesActionCreator","routingActionCreator","list","shadowRoot","noteContent","takeNote","querySelectorAll","forEach","ev","preventDefault","navigate","subscription","subscribe","state","note","notes","li","innerText","DeviceLinkStatus","Paths","MessageTypes","deviceLinkActionCreator","invitePane","processStartPane","generateButton","pasteButton","invCode","pastedCode","style","display","startDeviceLinking","linkDevice","deviceLink","inviteCode","deviceLinkStatus","Uninitialized","currentRoute","router","FirstTimeInit","LinkDevice","component","addServices","Store","initState","subscriptions","reducerSubscriptions","area","sub","push","splice","indexOf","reducer","action","updatedAreas","applyUpdateFn","cb","onDispatch","NotesActionNames","TakeNote","type","NotesActionCreator","localAppendOnlyLogService","messageEncoder","appendOnlyLog","addMessage","encodeNote","dispatch","appendOnlyLogCreated","getAll","entry","msg","JSON","parse","TextDecoder","decode","subarray","Note","navigateFirstTimeInit","navigateHome","toBase64UrlSafe","b","uint8Array","end","byteLength","btoa","String","fromCharCode","signingKey","persistence","beforeDigest","getLastMessage","createLogMessage","storeMessages","Date","encoded","beforeHash","TextEncoder","encode","uint8ArrayView","mergedArray","encodedContent","digest","subtle","digestMessage","sign","MessageModifier","messageFactory","hasAppendOnlyLog","keyPair","generateKey","namedCurve","createAppendOnlyLog","localAppendOnlyLog","encodePublicKeyMessage","getAppendOnlyLog","PublicKey","stringify","res","DataView","buffer","setInt32","Public","Home","path","updateStore","ServiceLocator","iceConfig","iceServers","EventTarget","connectionId","signallingClient","candidate","rtcConnection","addIceCandidate","answer","setRemoteDescription","resolveInit","offer","resolveConnectionRequest","reason","rejectConnectionRequest","dispatchEvent","Event","channel","timeout","RTCPeerConnection","dataChannel","createDataChannel","onopen","onDataChannelOpen","onicecandidate","publishIceCandidate","createOffer","initiateConnection","setLocalDescription","resolved","setTimeout","close","ondatachannel","datachannel","requestConnection","createAnswer","sendAnswer","rejectConenctionRequest","SignallingActionNames","localId","handlers","self","socket","WebSocket","send","onerror","console","onclose","connect","onmessage","parsed","data","find","v","acknowledgeInit","setOffer","setAnswer","handler","initiateChannel","connectionHandler","openChannel","SignallingConnectionChanged","connected","SignallingActionCreator","signallingConnected","DeviceLinkActionNames","DeviceLinkChannelInitialized","DeviceLinkStatusChanged","status","deviceLinkChannel","initializeDeviceLinkChannel","openDeviceLinkChannel","err","Error","Started","addReducer","initializationActionCreator","signallingActionCreator","setServiceLocator","initialize","run","initializeApplication","startSignalling"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","// Module\nvar code = \"<div> <h1> Welcome to greenchat! </h1> <p>Your device is being prepared, please hold on.</p> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1>Greenchat Home</h1> <nav> <a href=link-device>Link Device</a> </nav> <h2>List of your notes</h2> <ol id=notes-list> </ol> <div> <p>Add a note</p> <div> <input type=text id=note-content /> </div> <div> <button type=button id=addNoteBtn>Add Note</button> </div> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1>Link another of your devices to this account</h1> <div id=process-start-pane> <p>On the first device generate device invite code: <button type=button id=generate>Start</button></p> <p> On the second device paste the invite code: </p><div> <input type=text id=pasted-code /> <button id=redeem-code>redeem code</button> </div> <p></p> </div> <div id=invite-code-pane> Invite-Code: <span id=inv-code></span> </div>\";\n// Exports\nmodule.exports = code;","class t{constructor(t,e){this.routeResolver=t,this.routeRenderer=e,this.lastRoute=null,this.popStateListener=this.handlePopState.bind(this)}handlePopState(t){this.doRouting(window.location.pathname)}run(){let t=document.querySelector(\"base\");this.basePrefix=t.getAttribute(\"href\"),this.baseHref=t.href,window.addEventListener(\"popstate\",this.popStateListener),this.doRouting(window.location.pathname)}destroy(){window.removeEventListener(\"popstate\",this.popStateListener)}doRouting(t){let e=this.getRoute(t),n=this.routeResolver.resolve(this.lastRoute,e,this);return!!n&&(this.routeRenderer.render(n),this.lastRoute=e,!0)}getRoute(t){let e=t===this.baseHref,n=t.substr(0,this.basePrefix.length)===this.basePrefix;return e?\"/\":n?t.substring(this.basePrefix.length):t}navigate(t,e){let n=new URL(t,this.baseHref);this.doRouting(n.pathname)&&window.history.pushState({},e||document.title,n.href)}}class e{constructor(){this.currentComponent=null}render(t){t&&(this.currentComponent&&document.body.removeChild(this.currentComponent),document.body.appendChild(t),this.currentComponent=t)}}class n{constructor(t){this.container=t,this.currentComponent=!1}render(t){t&&(this.currentComponent&&(this.container.innerHTML=\"\"),this.container.appendChild(t),this.currentComponent=!0)}}export{e as BodyChildRouteRenderer,n as ContainerRouteRenderer,t as Router};\n//# sourceMappingURL=index.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { r as replaceTraps, i as instanceOfAny, a as reverseTransformCache, u as unwrap } from './wrap-idb-value.js';\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n","export class LogMessage {\r\n    constructor(public content: ArrayBuffer, public hash: string, public last: string, public signature: string, public timestamp: number, public sequence: number) {\r\n    }\r\n}\r\n","export function uuid() {\r\n    return ((<string><unknown>[1e7]) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n        (<number><unknown>c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> <number><unknown>c / 4).toString(16)\r\n    );\r\n}","import \"idb/with-async-ittr\";\r\nimport { openDB, IDBPDatabase } from \"idb\";\r\nimport { LogPersistence } from \"../append-only-log/LogPersistence\";\r\nimport { LogMessage } from \"../append-only-log/LogMessage\";\r\nimport { uuid } from \"../utils/uuid\";\r\nimport { AppendOnlyLogMetadata } from \"../append-only-log/AppendOnlyLogMetadata\";\r\n\r\nconst AppendOnlyLogMessages = \"AppendOnlyLogMessages\";\r\nconst AppendOnlyLogs = \"AppendOnlyLogs\";\r\n\r\nexport class GreenchatDatabase implements LogPersistence {\r\n    async getAppendOnlyLog(logId: string): Promise<AppendOnlyLogMetadata> {\r\n        let log = await this.db.get(AppendOnlyLogs, logId);\r\n        return {\r\n            logId: logId,\r\n            privateKey: log.privateKey,\r\n            publicKey: log.publicKey,\r\n            sequence: log.sequence\r\n        };\r\n    }\r\n    async getLastMessage(logId: string): Promise<LogMessage> {\r\n        let log = await this.db.get(AppendOnlyLogs, logId);\r\n        if (null == log.top) {\r\n            return null;\r\n        }\r\n        let msgData = await this.db.get(AppendOnlyLogMessages, log.top);\r\n        return new LogMessage(msgData.content, msgData.hash, msgData.last, msgData.signature, msgData.timestamp, msgData.sequence);\r\n    }\r\n    async storeMessages(logId: string, messages: LogMessage[]): Promise<boolean> {\r\n        let log = await this.db.get(AppendOnlyLogs, logId);\r\n        const tx = this.db.transaction(AppendOnlyLogMessages, \"readwrite\");\r\n        let { top } = log;\r\n        let sequence = null;\r\n        for (let m of messages) {\r\n            let storeObj = { ...m, logId, id: uuid(), before: top };\r\n            await tx.store.add(storeObj);\r\n            top = storeObj.id;\r\n            sequence = storeObj.sequence;\r\n        }\r\n        await tx.done;\r\n        log.top = top;\r\n        log.sequence = sequence;\r\n        await this.db.put(AppendOnlyLogs, log);\r\n        return true;\r\n    }\r\n    db: IDBPDatabase<unknown>;\r\n    async initialize() {\r\n        this.db = await openDB(\"greenchat-dbv2\", 1, {\r\n            upgrade(db) {\r\n                let store = db.createObjectStore(AppendOnlyLogMessages, { keyPath: \"id\" });\r\n                store.createIndex(\"logId\", \"logId\");\r\n                db.createObjectStore(AppendOnlyLogs, { keyPath: \"id\" });\r\n            },\r\n        });\r\n    }\r\n    async hasAppendOnlyLog(logId: string) {\r\n        return !! await this.db.get(AppendOnlyLogs, logId);\r\n    }\r\n    async createAppendOnlyLog(logId: string, publicKey: CryptoKey, privateKey: CryptoKey) {\r\n        await this.db.add(AppendOnlyLogs, { id: logId, privateKey, publicKey, sequence: 0, top: null });\r\n    }\r\n    async addMessage(logId: string, m: LogMessage) {\r\n        let log = await this.db.get(AppendOnlyLogs, logId);\r\n        let storeObj = { ...m, logId, id: uuid(), before: log.top };\r\n        await this.db.add(AppendOnlyLogMessages, storeObj);\r\n        log.top = storeObj.id;\r\n        log.sequence = storeObj.sequence;\r\n        await this.db.put(AppendOnlyLogs, log);\r\n    }\r\n\r\n    async *getAll(logId: string): AsyncGenerator<LogMessage, void, unknown> {\r\n        const index = this.db.transaction(AppendOnlyLogMessages).store.index('logId');\r\n        for await (const cursor of index.iterate(logId)) {\r\n            let item = cursor.value;\r\n            yield new LogMessage(item.content, item.hash, item.last, item.signature, item.timestamp,\r\n                item.sequence);\r\n        }\r\n    }\r\n}\r\n","import template from \"./first-time-init.html\";\r\n\r\nexport class FirstTimeInit extends HTMLElement {\r\n\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        let div = document.createElement(\"div\");\r\n        div.innerHTML = template;\r\n        shadow.appendChild(div);\r\n    }\r\n\r\n    connectedCallback() {\r\n\r\n    }\r\n}\r\n\r\ncustomElements.define('app-first-time-init', FirstTimeInit);","import template from \"./home.html\";\r\nimport { Store } from \"../state/Store\";\r\nimport { NotesActionCreator } from \"../state/actions/NotesActionCreator\";\r\nimport { ServiceLocator } from \"../ServiceLocator\";\r\nimport { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\r\n\r\nexport class Home extends HTMLElement {\r\n    store: Store;\r\n    notesActionCreator: NotesActionCreator;\r\n    list: HTMLOListElement;\r\n    noteContent: HTMLInputElement;\r\n    subscription: () => void;\r\n    routingActionCreator: RoutingActionCreator;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        let div = document.createElement(\"div\");\r\n        div.innerHTML = template;\r\n        shadow.appendChild(div);\r\n    }\r\n\r\n    addServices(serviceLocator: ServiceLocator) {\r\n        this.store = serviceLocator.store;\r\n        this.notesActionCreator = serviceLocator.notesActionCreator;\r\n        this.routingActionCreator = serviceLocator.routingActionCreator;\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.list = this.shadowRoot.querySelector(\"#notes-list\");\r\n        this.noteContent = this.shadowRoot.querySelector(\"#note-content\");\r\n        this.shadowRoot.querySelector(\"#addNoteBtn\").addEventListener(\"click\", () => {\r\n            this.notesActionCreator.takeNote(this.noteContent.value);\r\n            this.noteContent.value = \"\";\r\n        })\r\n        this.shadowRoot.querySelectorAll(\"a\").forEach(e => {\r\n            e.addEventListener(\"click\", ev => {\r\n                ev.preventDefault();\r\n                this.routingActionCreator.navigate(e.getAttribute(\"href\"))\r\n            });\r\n        });\r\n        this.subscription = this.store.subscribe(\"notes\", state => {\r\n            this.list.innerHTML = \"\";\r\n            for (let note of state.notes.notes) {\r\n                let li = document.createElement(\"li\");\r\n                li.innerText = note;\r\n                this.list.appendChild(li);\r\n            }\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.subscription();\r\n    }\r\n}\r\n\r\ncustomElements.define('app-home', Home);","export enum DeviceLinkStatus {\r\n    Started,\r\n    Succeeded,\r\n    Error,\r\n    Uninitialized\r\n}\r\n","import { Router } from \"route-it\";\r\nimport { FirstTimeInit } from \"../components/first-time-init\";\r\nimport { Home } from \"../components/home\";\r\nimport { Store } from \"../state/Store\";\r\nimport { NotesActionCreator } from \"../state/actions/NotesActionCreator\";\r\nimport { ServiceLocator } from \"../ServiceLocator\";\r\nimport { LinkDevice } from \"../components/link-device\";\r\n\r\nexport enum Paths {\r\n    FirstTimeInit = \"first-time-init\",\r\n    LinkDevice = \"link-device\",\r\n    Home = \"\"\r\n}\r\n\r\nexport class GreenchatRouteResolver {\r\n    serviceLocator: ServiceLocator;\r\n    setServiceLocator(serviceLocator: ServiceLocator) {\r\n        this.serviceLocator = serviceLocator;\r\n    }\r\n\r\n    resolve(lastRoute: string, currentRoute: string, router: Router<HTMLElement>) {\r\n        switch (currentRoute) {\r\n            case Paths.FirstTimeInit:\r\n                return new FirstTimeInit();\r\n            case Paths.LinkDevice: {\r\n                let component = new LinkDevice();\r\n                component.addServices(this.serviceLocator);\r\n                return component;\r\n            }\r\n            default:\r\n                let component = new Home();\r\n                component.addServices(this.serviceLocator);\r\n                return component;\r\n        }\r\n    }\r\n}\r\n","export enum MessageTypes {\r\n    PublicKey = \"PublicKey\",\r\n    Note = \"Note\"\r\n}\r\n","import template from \"./link-device.html\";\r\nimport { Store } from \"../state/Store\";\r\nimport { ServiceLocator } from \"../ServiceLocator\";\r\nimport { DeviceLinkActionCreator } from \"../state/actions/DeviceLinkActionCreator\";\r\nimport { DeviceLinkStatus } from \"../models/DeviceLinkStatus\";\r\n\r\nexport class LinkDevice extends HTMLElement {\r\n    store: Store;\r\n    deviceLinkActionCreator: DeviceLinkActionCreator;\r\n    invitePane: HTMLDivElement;\r\n    processStartPane: HTMLDivElement;\r\n    generateButton: HTMLButtonElement;\r\n    pasteButton: HTMLButtonElement;\r\n    invCode: HTMLSpanElement;\r\n    pastedCode: HTMLInputElement;\r\n    subscription: () => void;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        let div = document.createElement(\"div\");\r\n        div.innerHTML = template;\r\n\r\n        shadow.appendChild(div);\r\n    }\r\n\r\n    addServices(serviceLocator: ServiceLocator) {\r\n        this.store = serviceLocator.store;\r\n        this.deviceLinkActionCreator = serviceLocator.deviceLinkActionCreator;\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.invitePane = this.shadowRoot.querySelector(\"#invite-code-pane\");\r\n        this.processStartPane = this.shadowRoot.querySelector(\"#process-start-pane\");\r\n        this.generateButton = this.shadowRoot.querySelector(\"#generate\");\r\n        this.pasteButton = this.shadowRoot.querySelector(\"#redeem-code\");\r\n        this.invCode = this.shadowRoot.querySelector(\"#inv-code\");\r\n        this.pastedCode = this.shadowRoot.querySelector(\"#pasted-code\");\r\n        this.invitePane.style.display = \"none\";\r\n\r\n        this.generateButton.addEventListener(\"click\", async () => {\r\n            await this.deviceLinkActionCreator.startDeviceLinking();\r\n        });\r\n\r\n        this.pasteButton.addEventListener(\"click\", async () => {\r\n            await this.deviceLinkActionCreator.linkDevice(this.pastedCode.value);\r\n        });\r\n\r\n        this.subscription = this.store.subscribe(\"deviceLink\", state => {\r\n            this.invitePane.style.display = state.deviceLink.inviteCode ? \"block\" : \"none\";\r\n            this.invCode.innerText = state.deviceLink.inviteCode;\r\n            this.processStartPane.style.display = state.deviceLink.deviceLinkStatus == DeviceLinkStatus.Uninitialized ? \"block\" : \"none\";\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.subscription();\r\n    }\r\n}\r\n\r\ncustomElements.define('app-link-device', LinkDevice);\r\n","import { State } from \"./State\";\r\nimport { Reducer } from \"./Reducer\";\r\nimport { Action } from \"./Action\";\r\n\r\nexport interface Subscription {\r\n    call(a: State): void;\r\n    area: keyof State | \"\";\r\n}\r\n\r\nexport interface ReducerSubscription {\r\n    reducer: Reducer<any, any>;\r\n    area: keyof State | null;\r\n}\r\n\r\nexport class Store {\r\n    private state: State;\r\n    private subscriptions: Subscription[];\r\n    private reducerSubscriptions: ReducerSubscription[];\r\n    constructor(initState: () => State) {\r\n        this.subscriptions = [];\r\n        this.reducerSubscriptions = [];\r\n        this.state = initState();\r\n    }\r\n    subscribe(area: keyof State, call: (a: State) => void) {\r\n        let sub = { area, call };\r\n        this.subscriptions.push(sub);\r\n        return () => {\r\n            this.subscriptions.splice(this.subscriptions.indexOf(sub), 1);\r\n        };\r\n    }\r\n    addReducer<K extends keyof State>(area: K | null, reducer: Reducer<State[K] | State, any>) {\r\n        this.reducerSubscriptions.push({ area, reducer });\r\n    }\r\n    dispatch(action: Action) {\r\n        let updatedAreas: (keyof State | \"\")[] = [];\r\n        for (let s of this.reducerSubscriptions) {\r\n            let applyUpdateFn;\r\n            if (s.area) {\r\n                applyUpdateFn = (cb: (a: any) => any) => {\r\n                    (<any>this.state[s.area]) = cb(this.state[s.area]);\r\n                    updatedAreas.push(s.area);\r\n                };\r\n            }\r\n            else {\r\n                applyUpdateFn = (cb: (a: any) => any) => {\r\n                    this.state = cb(this.state);\r\n                    updatedAreas.push(\"\");\r\n                };\r\n            }\r\n            s.reducer.onDispatch(action, applyUpdateFn);\r\n        }\r\n        if (updatedAreas.length) {\r\n            for (let s of this.subscriptions) {\r\n                if (!s.area || updatedAreas.indexOf(s.area) > -1) {\r\n                    s.call(this.state);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Store } from \"../Store\";\r\nimport { Action } from \"../Action\";\r\nimport { LocalAppendOnlyLogService } from \"../../append-only-log/LocalAppendOnlyLogService\";\r\nimport { MessageEncoder } from \"../../message-encoding/MessageEncoder\";\r\n\r\nexport enum NotesActionNames {\r\n    TakeNote = \"TakeNote\"\r\n}\r\n\r\nexport class TakeNote implements Action {\r\n    readonly type = NotesActionNames.TakeNote;\r\n    constructor(public content: string) {\r\n\r\n    }\r\n}\r\n\r\nexport type NotesActions = TakeNote;\r\n\r\nexport class NotesActionCreator {\r\n    constructor(private store: Store,\r\n         private localAppendOnlyLogService : LocalAppendOnlyLogService,\r\n         private messageEncoder : MessageEncoder) {\r\n\r\n    }\r\n    async takeNote(content: string) {\r\n        let appendOnlyLog = await this.localAppendOnlyLogService.get(\"local\");\r\n        await appendOnlyLog.addMessage(this.messageEncoder.encodeNote(content));\r\n        this.store.dispatch(new TakeNote(content));\r\n    }\r\n}","import { RoutingActionCreator } from \"./RoutingActionCreator\";\r\nimport { LocalAppendOnlyLogService } from \"../../append-only-log/LocalAppendOnlyLogService\";\r\nimport { Store } from \"../Store\";\r\nimport { MessageTypes } from \"../../message-encoding/MessageTypes\";\r\nimport { TakeNote } from \"./NotesActionCreator\";\r\nexport class InitializationActionCreator {\r\n    constructor(private store: Store, private localAppendOnlyLogService: LocalAppendOnlyLogService, private routingActionCreator: RoutingActionCreator) {\r\n    }\r\n    async initializeApplication() {\r\n        let appendOnlyLogCreated = await this.localAppendOnlyLogService.appendOnlyLogCreated(\"local\");\r\n        if (!appendOnlyLogCreated) {\r\n            this.routingActionCreator.navigateFirstTimeInit();\r\n            await this.localAppendOnlyLogService.create(\"local\");\r\n            this.routingActionCreator.navigateHome();\r\n        } else {\r\n            let log = await this.localAppendOnlyLogService.get(\"local\");\r\n            for await (let entry of log.getAll()) {\r\n                // for now assume public msg\r\n                let msg = JSON.parse(new TextDecoder().decode(new Uint8Array(entry.content).subarray(2)));\r\n                if (msg.type == MessageTypes.Note) {\r\n                    this.store.dispatch(new TakeNote(msg.content));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","export function toBase64UrlSafe(b: ArrayBuffer) {\r\n    let uint8Array = new Uint8Array(b);\r\n    let start = 0;\r\n    let end = uint8Array.byteLength;\r\n\r\n    const base64 = window.btoa(\r\n        String.fromCharCode.apply(null, uint8Array.subarray(start, end)));\r\n    return base64\r\n        .replace(/\\=/g, '') // eslint-disable-line no-useless-escape\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_');\r\n}","import { LogMessage } from \"./LogMessage\";\r\nimport { toBase64UrlSafe } from \"../utils/toBase64UrlSafe\";\r\nimport { digestMessage } from \"./digestMessage\";\r\nimport { LogPersistence } from \"./LogPersistence\";\r\n\r\nexport class LocalAppendOnlyLog {\r\n\r\n    constructor(private signingKey: CryptoKey,\r\n        private logId: string,\r\n        private sequence: number,\r\n        private persistence: LogPersistence) {\r\n    }\r\n\r\n    async addMessage(content: ArrayBuffer) {\r\n        let beforeDigest;\r\n        if (this.sequence == 0) {\r\n            beforeDigest = \"initial\";\r\n        }\r\n        else {\r\n            let last = await this.persistence.getLastMessage(this.logId);\r\n            beforeDigest = last.hash;\r\n        }\r\n        let sequence = this.sequence + 1;\r\n        let msg = await this.createLogMessage(content, beforeDigest, sequence);\r\n        await this.persistence.storeMessages(this.logId, [msg]);\r\n        this.sequence = sequence;\r\n    }\r\n\r\n    private async createLogMessage(content: ArrayBuffer, beforeDigest: string, sequence: number): Promise<LogMessage> {\r\n        let timestamp = +new Date();\r\n        let encoded = await digestMessage(beforeDigest, content, timestamp);\r\n        let signature = await crypto.subtle.sign({ name: \"ECDSA\", hash: \"SHA-256\" }, this.signingKey, encoded.encodedContent);\r\n        return new LogMessage(content, toBase64UrlSafe(encoded.digest), beforeDigest, toBase64UrlSafe(signature), timestamp, sequence);\r\n    }\r\n\r\n    getAll(): AsyncGenerator<LogMessage, void, unknown> {\r\n        return this.persistence.getAll(this.logId);\r\n    }\r\n}","export async function digestMessage(beforeHash: string, content: ArrayBuffer, timestamp: number) {\r\n    let encoder = new TextEncoder();\r\n    let encoded = encoder.encode(`${timestamp}.${beforeHash}`);\r\n    let uint8ArrayView = new Uint8Array(content);\r\n    let mergedArray = new Uint8Array(encoded.length + uint8ArrayView.length);\r\n    mergedArray.set(encoded);\r\n    mergedArray.set(uint8ArrayView, encoded.length);\r\n    let digest = await crypto.subtle.digest(\"SHA-256\", encoded);\r\n    return {\r\n        encodedContent: encoded,\r\n        digest: digest\r\n    };\r\n}\r\n","export enum MessageModifier {\r\n    Public = 1\r\n}\r\n","import { LocalAppendOnlyLog } from \"./LocalAppendOnlyLog\";\r\nimport { MessageEncoder } from \"../message-encoding/MessageEncoder\";\r\nimport { LogPersistence } from \"./LogPersistence\";\r\n\r\nexport class LocalAppendOnlyLogService {\r\n    constructor(private persistence: LogPersistence, private messageFactory: MessageEncoder) {\r\n    }\r\n    async appendOnlyLogCreated(logId: string) {\r\n        return await this.persistence.hasAppendOnlyLog(logId);\r\n    }\r\n    async create(logId: string) {\r\n        let keyPair = await crypto.subtle.generateKey({ name: \"ECDSA\", namedCurve: \"P-256\" }, false, [\"sign\", \"verify\"]);\r\n        await this.persistence.createAppendOnlyLog(logId, keyPair.publicKey, keyPair.privateKey);\r\n        let localAppendOnlyLog = new LocalAppendOnlyLog(keyPair.privateKey, \"local\", 0, this.persistence);\r\n        await localAppendOnlyLog.addMessage(this.messageFactory.encodePublicKeyMessage(keyPair.publicKey));\r\n    }\r\n    async get(logId: string) {\r\n        let appendOnlyLog = await this.persistence.getAppendOnlyLog(logId);\r\n        return new LocalAppendOnlyLog(appendOnlyLog.privateKey, logId, appendOnlyLog.sequence, this.persistence);\r\n    }\r\n}\r\n","import { MessageTypes } from \"./MessageTypes\";\r\nimport { MessageModifier } from \"./MessageModifier\";\r\nexport class MessageEncoder {\r\n    encodePublicKeyMessage(publicKey: CryptoKey): ArrayBuffer {\r\n        let msg = { publicKey, type: MessageTypes.PublicKey };\r\n        let encoder = new TextEncoder();\r\n        let encoded = encoder.encode(JSON.stringify(msg));\r\n        let res = new Uint8Array(encoded.length + 2);\r\n        new DataView(res.buffer).setInt32(0, MessageModifier.Public, true);\r\n        res.set(encoded, 2);\r\n        return res.buffer;\r\n    }\r\n    encodeNote(content: string): ArrayBuffer {\r\n        let msg = { content, type: MessageTypes.Note };\r\n        let encoder = new TextEncoder();\r\n        let encoded = encoder.encode(JSON.stringify(msg));\r\n        let res = new Uint8Array(encoded.length + 2);\r\n        new DataView(res.buffer).setInt32(0, MessageModifier.Public, true);\r\n        res.set(encoded, 2);\r\n        return res.buffer;\r\n    }\r\n}\r\n","import { Router } from \"route-it\";\r\nimport { Paths } from \"../../routing/GreenchatRouteResolver\";\r\nexport class RoutingActionCreator {\r\n    constructor(private router: Router<HTMLElement>) {\r\n    }\r\n    navigateFirstTimeInit() {\r\n        this.router.navigate(Paths.FirstTimeInit, null);\r\n    }\r\n    navigateHome() {\r\n        this.router.navigate(Paths.Home, null);\r\n    }\r\n\r\n    navigate(path: string) {\r\n        this.router.navigate(path, null);\r\n    }\r\n}\r\n","import { Reducer } from \"../Reducer\";\r\nimport { NotesSubState } from \"../State\";\r\nimport { NotesActions, NotesActionNames } from \"../actions/NotesActionCreator\";\r\n\r\nexport class NotesReducer implements Reducer<NotesSubState, NotesActions> {\r\n    onDispatch(action: NotesActions, updateStore: (a: (s: NotesSubState) => NotesSubState) => void): void {\r\n        switch (action.type) {\r\n            case NotesActionNames.TakeNote: {\r\n                updateStore((s: NotesSubState) => {\r\n                    let notes = s.notes || [];\r\n                    notes.push(action.content);\r\n                    return { ...s, notes };\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","import { Store } from \"./state/Store\";\r\nimport { NotesActionCreator } from \"./state/actions/NotesActionCreator\";\r\nimport { DeviceLinkActionCreator } from \"./state/actions/DeviceLinkActionCreator\";\r\nimport { RoutingActionCreator } from \"./state/actions/RoutingActionCreator\";\r\n\r\nexport class ServiceLocator {\r\n    constructor(public store: Store,\r\n        public notesActionCreator: NotesActionCreator,\r\n        public deviceLinkActionCreator: DeviceLinkActionCreator,\r\n        public routingActionCreator : RoutingActionCreator) {\r\n\r\n    }\r\n}","export const iceConfig =  { iceServers: [{\"urls\":[\"turn:turn.greenchat.me:443\"],\"username\":\"raphael\",\"credential\":\"@123@test@\"}] };\r\nexport const signallingServer = \"ws://localhost:33713\";","import { iceConfig } from \"./config\";\r\nimport { SignallingClient } from \"./SignallingClient\";\r\nimport { ChannelInitialization } from \"./ChannelInitialization\";\r\nimport { DataChannelOpenedEventInit } from \"./DataChannelOpenedEventInit\";\r\nexport class PeerConnectionHandler extends EventTarget {\r\n    private rtcConnection: RTCPeerConnection;\r\n    private resolveInit: () => void;\r\n    private resolveConnectionRequest: (offer: RTCSessionDescriptionInit) => void;\r\n    private rejectConnectionRequest: (reason: string) => void;\r\n    constructor(public connectionId: string, private signallingClient: SignallingClient) {\r\n        super();\r\n    }\r\n    addIceCandidate(candidate: RTCIceCandidateInit) {\r\n        this.rtcConnection.addIceCandidate(candidate);\r\n    }\r\n    setAnswer(answer: RTCSessionDescriptionInit) {\r\n        this.rtcConnection.setRemoteDescription(answer);\r\n    }\r\n    acknowledgeInit() {\r\n        this.resolveInit();\r\n    }\r\n    setOffer(offer: RTCSessionDescriptionInit) {\r\n        this.resolveConnectionRequest(offer);\r\n    }\r\n    rejectConenctionRequest(reason: string) {\r\n        this.rejectConnectionRequest(reason);\r\n    }\r\n    private onDataChannelOpen(c: RTCDataChannel) {\r\n        this.dispatchEvent(new Event(\"datachannelopen\", <DataChannelOpenedEventInit>{ channel: c }));\r\n    }\r\n    initiateChannel(timeout: number): Promise<unknown> {\r\n        this.rtcConnection = new RTCPeerConnection({ ...iceConfig });\r\n        let dataChannel = this.rtcConnection.createDataChannel(\"sendChannel\");\r\n        dataChannel.onopen = () => this.onDataChannelOpen(dataChannel);\r\n        this.rtcConnection.onicecandidate = ({ candidate }) => {\r\n            if (candidate) {\r\n                this.signallingClient.publishIceCandidate(this.connectionId, candidate);\r\n            }\r\n        };\r\n        this.rtcConnection.createOffer().then(offer => {\r\n            this.signallingClient.initiateConnection(this.connectionId, timeout, offer);\r\n            this.rtcConnection.setLocalDescription(offer);\r\n        });\r\n        let promise = new Promise<ChannelInitialization>((resolve, reject) => {\r\n            let resolved = false;\r\n            this.resolveInit = () => {\r\n                resolved = true;\r\n                resolve();\r\n            };\r\n            setTimeout(() => {\r\n                if (!resolved) {\r\n                    reject(\"Timeout\");\r\n                    this.rtcConnection.close();\r\n                }\r\n            }, 2000);\r\n        });\r\n        return promise;\r\n    }\r\n    openChannel(): Promise<unknown> {\r\n        this.rtcConnection = new RTCPeerConnection({ ...iceConfig });\r\n        this.rtcConnection.onicecandidate = ({ candidate }) => {\r\n            if (candidate) {\r\n                this.signallingClient.publishIceCandidate(this.connectionId, candidate);\r\n            }\r\n        };\r\n        this.rtcConnection.ondatachannel = e => {\r\n            let datachannel = e.channel;\r\n            datachannel.onopen = () => {\r\n                this.onDataChannelOpen(datachannel);\r\n            };\r\n        };\r\n        this.signallingClient.requestConnection(this.connectionId);\r\n        let promise = new Promise<unknown>((resolve, reject) => {\r\n            let resolved = false;\r\n            this.resolveConnectionRequest = (offer: RTCSessionDescriptionInit) => {\r\n                this.rtcConnection.setRemoteDescription(offer).then(() => {\r\n                    this.rtcConnection.createAnswer().then(answer => {\r\n                        this.rtcConnection.setLocalDescription(answer);\r\n                        this.signallingClient.sendAnswer(this.connectionId, answer);\r\n                        resolved = true;\r\n                        resolve();\r\n                    });\r\n                });\r\n            };\r\n            this.rejectConenctionRequest = (msg: string) => {\r\n                resolved = true;\r\n                reject(msg);\r\n                this.rtcConnection.close();\r\n            };\r\n            setTimeout(() => {\r\n                if (!resolved) {\r\n                    reject(\"Timeout\");\r\n                    this.rtcConnection.close();\r\n                }\r\n            }, 10000);\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n","import { Store } from \"../Store\";\r\nimport { Action } from \"../Action\";\r\nimport { SignallingClient } from \"../../webrtc/SignallingClient\";\r\n\r\nexport enum SignallingActionNames {\r\n    SignallingConnectionChanged = \"SignallingConnectionChanged\"\r\n}\r\n\r\nexport class SignallingConnectionChanged implements Action {\r\n    readonly type = SignallingActionNames.SignallingConnectionChanged;\r\n    constructor(public connected: boolean) {\r\n\r\n    }\r\n}\r\n\r\nexport type SignallingActions = SignallingConnectionChanged;\r\n\r\nexport class SignallingActionCreator {\r\n    constructor(private store: Store, private signallingClient: SignallingClient) {\r\n        this.signallingClient.addEventListener(\"connected\", () => {\r\n            this.store.dispatch(new SignallingConnectionChanged(true));\r\n        });\r\n        this.signallingClient.addEventListener(\"disconnected\", () => {\r\n            this.store.dispatch(new SignallingConnectionChanged(false));\r\n        });\r\n    }\r\n\r\n    startSignalling() {\r\n        this.signallingClient.connect();\r\n    }\r\n}","import { uuid } from \"../utils/uuid\";\r\nimport { signallingServer } from \"./config\";\r\nimport { PeerConnectionHandler } from \"./PeerConnectionHandler\";\r\nimport { ChannelInitialization } from \"./ChannelInitialization\";\r\n\r\nexport class SignallingClient extends EventTarget {\r\n    private localId: string;\r\n    private handlers: PeerConnectionHandler[];\r\n    private socket: WebSocket;\r\n\r\n    constructor() {\r\n        super();\r\n        this.localId = uuid();\r\n        this.handlers = [];\r\n    }\r\n\r\n    connect() {\r\n        let self = this;\r\n        let socket = this.socket = new WebSocket(signallingServer);\r\n        socket.onopen = function () {\r\n            socket.send(JSON.stringify({ type: \"connected\", id: self.localId }));\r\n            this.dispatchEvent(new Event(\"connected\"));\r\n        };\r\n        socket.onerror = function (error) {\r\n            console.log('WebSocket Error ' + error);\r\n            socket.close();\r\n        };\r\n        socket.onclose = function (e) {\r\n            console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\r\n            this.dispatchEvent(new Event(\"disconnected\"));\r\n            setTimeout(function () {\r\n                self.connect();\r\n            }, 1000);\r\n        }\r\n        socket.onmessage = function (e) {\r\n            let parsed = JSON.parse(e.data);\r\n            switch (parsed.type) {\r\n                case \"connection_initialized\":\r\n                    self.handlers.find(v => v.connectionId === parsed.connectionId).acknowledgeInit();\r\n                    break;\r\n                case \"connection_offer\":\r\n                    self.handlers.find(v => v.connectionId === parsed.connectionId)\r\n                        .setOffer(parsed.offer);\r\n                    break;\r\n                case \"connection_accepted\":\r\n                    self.handlers.find(v => v.connectionId === parsed.connectionId)\r\n                        .setAnswer(parsed.answer);\r\n                    break;\r\n                case \"connection_not_found\":\r\n                    self.handlers.find(v => v.connectionId === parsed.connectionId)\r\n                        .rejectConenctionRequest(\"Not found\");\r\n                    break;\r\n                case \"new_ice_candidate\":\r\n                    self.handlers.find(v => v.connectionId === parsed.connectionId)\r\n                        .addIceCandidate(parsed.candidate);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async initializeDeviceLinkChannel(timeout: number): Promise<ChannelInitialization> {\r\n        let handler = new PeerConnectionHandler(uuid(), this);\r\n        this.handlers.push(handler);\r\n        await handler.initiateChannel(timeout);\r\n        return {\r\n            connectionHandler: handler\r\n        };\r\n    }\r\n\r\n    async openDeviceLinkChannel(connectionId: string): Promise<ChannelInitialization> {\r\n        let handler = new PeerConnectionHandler(connectionId, this);\r\n        this.handlers.push(handler);\r\n        await handler.openChannel();\r\n        return {\r\n            connectionHandler: handler\r\n        };\r\n    }\r\n    requestConnection(connectionId: string) {\r\n        this.socket.send(JSON.stringify({ type: \"request_connection\", connectionId }));\r\n    }\r\n\r\n    sendAnswer(connectionId: string, answer: RTCSessionDescriptionInit) {\r\n        this.socket.send(JSON.stringify({ type: \"accept_connection\", connectionId, answer }));\r\n    }\r\n\r\n    initiateConnection(connectionId: string, timeout: number, offer: RTCSessionDescriptionInit) {\r\n        this.socket.send(JSON.stringify({ type: \"initialize_connection\", connectionId, timeout, offer }));\r\n    }\r\n\r\n    publishIceCandidate(connectionId: string, candidate: RTCIceCandidateInit) {\r\n        this.socket.send(JSON.stringify({\r\n            type: \"new_ice_candidate\",\r\n            candidate,\r\n            id: this.localId,\r\n            connectionId: connectionId\r\n        }));\r\n    }\r\n}","import { Reducer } from \"../Reducer\";\r\nimport { State } from \"../State\";\r\nimport { SignallingActions, SignallingActionNames } from \"../actions/SignallingActionCreator\";\r\n\r\nexport class GlobalReducer implements Reducer<State, SignallingActions> {\r\n    onDispatch(action: SignallingActions, updateStore: (a: (s: State) => State) => void): void {\r\n        switch (action.type) {\r\n            case SignallingActionNames.SignallingConnectionChanged: {\r\n                updateStore(s => {\r\n                    return { ...s, signallingConnected: action.connected };\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","import { Store } from \"../Store\";\r\nimport { Action } from \"../Action\";\r\nimport { SignallingClient } from \"../../webrtc/SignallingClient\";\r\nimport { DeviceLinkStatus } from \"../../models/DeviceLinkStatus\";\r\n\r\nexport enum DeviceLinkActionNames {\r\n    DeviceLinkChannelInitialized = \"DeviceLinkChannelInitialized\",\r\n    DeviceLinkStatusChanged = \"DeviceLinkStatusChanged\"\r\n}\r\n\r\nexport class DeviceLinkChannelInitialized implements Action {\r\n    readonly type = DeviceLinkActionNames.DeviceLinkChannelInitialized;\r\n    constructor(public connectionId: string) {\r\n\r\n    }\r\n}\r\n\r\nexport class DeviceLinkStatusChanged implements Action {\r\n    readonly type = DeviceLinkActionNames.DeviceLinkStatusChanged;\r\n    constructor(public status: DeviceLinkStatus) {\r\n\r\n    }\r\n}\r\n\r\nexport type DeviceLinkActions = DeviceLinkChannelInitialized | DeviceLinkStatusChanged;\r\n\r\nexport class DeviceLinkActionCreator {\r\n    constructor(private store: Store, private signallingClient: SignallingClient) {\r\n    }\r\n\r\n    async startDeviceLinking() {\r\n        let deviceLinkChannel = await this.signallingClient.initializeDeviceLinkChannel(120000);\r\n        deviceLinkChannel.connectionHandler.addEventListener(\"datachannelopen\", e => {\r\n            console.log(\"connected\");\r\n        });\r\n        this.store.dispatch(new DeviceLinkChannelInitialized(deviceLinkChannel.connectionHandler.connectionId));\r\n    }\r\n\r\n    async linkDevice(connectionId: string) {\r\n        try {\r\n            let deviceLinkChannel = await this.signallingClient.openDeviceLinkChannel(connectionId);\r\n            deviceLinkChannel.connectionHandler.addEventListener(\"datachannelopen\", e => {\r\n                console.log(\"connected\");\r\n            });\r\n        }\r\n        catch (err) {\r\n            this.store.dispatch(new DeviceLinkStatusChanged(DeviceLinkStatus.Error));\r\n        }\r\n    }\r\n}","import { Reducer } from \"../Reducer\";\r\nimport { DeviceLinkState } from \"../State\";\r\nimport { DeviceLinkActions, DeviceLinkActionNames } from \"../actions/DeviceLinkActionCreator\";\r\nimport { DeviceLinkStatus } from \"../../models/DeviceLinkStatus\";\r\n\r\nexport class DeviceLinkReducer implements Reducer<DeviceLinkState, DeviceLinkActions> {\r\n    onDispatch(action: DeviceLinkActions, updateStore: (a: (s: DeviceLinkState) => DeviceLinkState) => void): void {\r\n        switch (action.type) {\r\n            case DeviceLinkActionNames.DeviceLinkChannelInitialized:\r\n                updateStore((s) => {\r\n                    return {\r\n                        ...s, inviteCode: action.connectionId,\r\n                        deviceLinkStatus: DeviceLinkStatus.Started\r\n                    };\r\n                });\r\n                break;\r\n            case DeviceLinkActionNames.DeviceLinkStatusChanged:\r\n                updateStore((s) => {\r\n                    return {\r\n                        ...s,\r\n                        deviceLinkStatus: action.status\r\n                    };\r\n                });\r\n                break;\r\n        }\r\n    }\r\n}","import { Router, BodyChildRouteRenderer } from \"route-it\";\r\nimport { GreenchatDatabase } from \"./database/GreenchatDatabase\";\r\nimport { GreenchatRouteResolver } from \"./routing/GreenchatRouteResolver\";\r\nimport { Store } from \"./state/Store\";\r\nimport { InitializationActionCreator } from \"./state/actions/InitializationActionCreator\";\r\nimport { LocalAppendOnlyLogService } from \"./append-only-log/LocalAppendOnlyLogService\";\r\nimport { MessageEncoder } from \"./message-encoding/MessageEncoder\";\r\nimport { RoutingActionCreator } from \"./state/actions/RoutingActionCreator\";\r\nimport { NotesReducer } from \"./state/reducers/NotesReducer\";\r\nimport { NotesActionCreator } from \"./state/actions/NotesActionCreator\";\r\nimport { ServiceLocator } from \"./ServiceLocator\";\r\nimport { SignallingClient } from \"./webrtc/SignallingClient\";\r\nimport { GlobalReducer } from \"./state/reducers/GlobalReducer\";\r\nimport { SignallingActionCreator } from \"./state/actions/SignallingActionCreator\";\r\nimport { DeviceLinkActionCreator } from \"./state/actions/DeviceLinkActionCreator\";\r\nimport { DeviceLinkStatus } from \"./models/DeviceLinkStatus\";\r\nimport { DeviceLinkReducer } from \"./state/reducers/DeviceLinkReducer\";\r\n\r\nasync function run() {\r\n    const db = new GreenchatDatabase();\r\n    const signallingClient = new SignallingClient();\r\n    const routeResolver = new GreenchatRouteResolver();\r\n    const router = new Router(routeResolver, new BodyChildRouteRenderer());\r\n    const store = new Store(() => {\r\n        return {\r\n            signallingConnected: false,\r\n            notes: { notes: [] },\r\n            deviceLink: {\r\n                deviceLinkStatus: DeviceLinkStatus.Uninitialized,\r\n                inviteCode: null\r\n            }\r\n        }\r\n    });\r\n    store.addReducer(\"notes\", new NotesReducer());\r\n    store.addReducer(null, new GlobalReducer());\r\n    store.addReducer(\"deviceLink\", new DeviceLinkReducer());\r\n\r\n    const messageEncoder = new MessageEncoder();\r\n    const localAppendOnlyLogService = new LocalAppendOnlyLogService(db, messageEncoder);\r\n\r\n    const routingActionCreator = new RoutingActionCreator(router);\r\n    const initializationActionCreator = new InitializationActionCreator(store, localAppendOnlyLogService, routingActionCreator);\r\n    const notesActionCreator = new NotesActionCreator(store, localAppendOnlyLogService, messageEncoder);\r\n    const signallingActionCreator = new SignallingActionCreator(store, signallingClient);\r\n    const deviceLinkActionCreator = new DeviceLinkActionCreator(store, signallingClient);\r\n\r\n    const serviceLocator = new ServiceLocator(store,\r\n        notesActionCreator,\r\n        deviceLinkActionCreator,\r\n        routingActionCreator);\r\n    routeResolver.setServiceLocator(serviceLocator);\r\n\r\n    await db.initialize();\r\n    router.run();\r\n\r\n    await initializationActionCreator.initializeApplication();\r\n    signallingActionCreator.startSignalling();\r\n}\r\n\r\nrun().catch(err => console.error(err));\r\n\r\n"],"sourceRoot":""}